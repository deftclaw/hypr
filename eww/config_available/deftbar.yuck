(defwindow deftbar
  :monitor 1 ;; for Wayland
  :stacking "fg"
  :focusable false
  :exclusive true
  :geometry ( geometry :anchor "top center" :height "3%" :width "100%" )
  (deftbar_layout))

(defwindow net_info
  :exclusive false
  :focusable false
  :geometry ( geometry :anchor "top right" :height "6%" :width "10%" )
  :monitor 1 ;; for Wayland
  :stacking "overlay"
  (net_info_layout))

(defpoll foc :interval "0.1s"
  :initial `N/A`
  `$HOME/.local/bin/focus 92`)
(defpoll net :interval "10s"
  :initial `N/A`
  `$HOME/.local/bin/signal`)
(defpoll time :interval "5s"
  :initial `date +'{"hour": "%H", "min": "%M"}'`
  `date +'{"hour": "%H", "min": "%M"}'`)

(defwidget deftbar_layout[]
  (box :class "layout-box"
    (box :class "left-bar" :halign "start" :space-evenly false
      (_sundial)
      (label :text "|" :class "sep")
      (_clock))
    (box :class "center-bar" :space-evenly false :halign "center" :hexpand false
      (_active :focus foc :halign "center" :class "active"))
    (box :class "right-bar" :space-evenly false :halign "end"
      (_network :strength net :offline "󰣽" :excellent "󰣺" :good "󰣸" :okay "󰣶" :slow "󰣴")
      (label :text "|" :class "sep")
      (button :onclick "eww close deftbar" :class "close-btn" "󰛉"))))

(defwidget net_info_layout[]
  (box :class "net-info"
    (label :text "Testing...")))

(defwidget _active[focus]
  (box :class "foc-box" :space-evenly false :spacing 20
    (label :text focus)))

(defwidget _buttons [shutdown shutdown_icon reboot reboot_icon logout logout_icon]
  (box :class "btns-box" :spacing 5 :vexpand true :hexpand true :valign "end"
       :halign "end" :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _clock[]
  (label :class "clock" :halign "end"
         :text "${time.hour} ${time.min}"))

(defwidget _network [strength offline excellent good okay slow]
  (box :class "net-box" :space-evenly false :spacing 8
    (label :text {strength == "" ? offline :
      strength > -26 ? slow :
        strength > -51 ? okay :
          strength > 76 ? good : excellent})))

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "start" :hexpand true
         :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" : 
                time.hour <= 5 ? "Dawn" : 
                time.hour >= 6 && (time.hour <= 8 && time.min <= 59) ? "Morning" : 
                time.hour >= 9 && (time.hour <= 11 && time.min <= 59) ? "Late Morning" :
                time.hour == 12 && time.min <= 29 ? "Midday" : 
                time.hour >= 12 && time.hour <= 16 ? "Afternoon" : 
                time.hour > 16 && time.hour <= 17 ? "Late Afternoon" :
                (time.hour >= 17 && time.min <= 1)
                  || (time.hour <= 18 && time.min <= 20) ? "Early Evening" :
                time.hour >= 18 && time.hour <= 19 ? "Dusk" :
                time.hour > 19 && time.hour <= 21 ? "Late Evening" :
                time.hour > 21 ? "Night" : "Midnight"}))

